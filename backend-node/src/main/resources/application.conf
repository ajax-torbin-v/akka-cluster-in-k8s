akka {
  actor.provider = "cluster"
  management.http.hostname = ${?POD_IP}
  management.http.bind-hostname = "0.0.0.0"
  management.http.port = 8558

  remote.artery.canonical.hostname = ${?POD_IP}
  remote.artery.canonical.port = 2552

  cluster.roles = ["backend"]
  cluster.downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  discovery.method = kubernetes-api

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = "INFO"

  management.cluster.bootstrap.contact-point-discovery {
    # The name of the Kubernetes Service that the discovery mechanism will query.
    # The service's pods should have the `management` port defined and labeled correctly.
    service-name = "akka-cluster"

    # The name of the port to use for Akka Management's HTTP endpoint.
    # This must match the port-name used in your Kubernetes Service definition.
    port-name = "management"

    # The minimum number of Akka nodes that must be discovered and confirmed
    # before the bootstrap process will attempt to form a cluster.
    # This is crucial for preventing a cluster from being formed by an isolated single node.
    required-contact-point-nr = 3

    # A Kubernetes label selector that the discovery mechanism uses to find Pods.
    # It should match the labels on the Pods you want to be part of the cluster.
    # This is used to query the Kubernetes API for the addresses of the Pods.
    pod-label-selector = "app=akka-cluster"

    # The interval between attempts to discover contact points.
    contact-point-interval = 3 seconds
  }
}